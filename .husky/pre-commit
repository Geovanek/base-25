#!/bin/sh

# Cores
NC='\033[0m'        # Sem cor (reset)
BBlue='\033[1;34m'   # Azul
BRed='\033[1;31m'    # Vermelho
BGreen='\033[1;32m'  # Verde

# ForÃ§ar o uso de cores em comandos que suportam a opÃ§Ã£o `--color=always`
export TERM=xterm-256color

# Verificar se estamos rodando no Sail
IS_SAIL=0
if [ -f ".env" ]; then
    if grep -q "LARAVEL_SAIL=1" .env; then
        IS_SAIL=1
    fi
fi

# Define o comando PHP com base na verificaÃ§Ã£o
if [ "$IS_SAIL" -eq 1 ]; then
    PHP_CMD="./vendor/bin/sail"
    show_message "success" "Usando Laravel Sail para execuÃ§Ã£o dos comandos"
else
    PHP_CMD="php"
    show_message "success" "Usando PHP local para execuÃ§Ã£o dos comandos"
fi

# FunÃ§Ã£o para exibir mensagens de sucesso ou erro
show_message() {
    local type="$1"
    local message="$2"

    if [ "$type" = "error" ]; then
        printf "${BRed}%s${NC}\n" "$message"
    else
        printf "${BGreen}%s${NC}\n" "$message"
    fi
}

# Rodar PHPStan para garantir que o cÃ³digo estÃ¡ limpo de erros
printf "${BBlue}Executando PHPStan...${NC}\n"
if [ "$IS_SAIL" -eq 1 ]; then
    $PHP_CMD bin phpstan analyse --ansi
else
    ./vendor/bin/phpstan analyse --ansi
fi

if [ $? -ne 0 ]; then
    show_message "error" "O cÃ³digo nÃ£o estÃ¡ nas diretrizes mÃ­nimas exigidas. Execute o LARASTAN e resolva as inconsistÃªncias ðŸ˜‰"
    exit 1
fi

# Rodar o Larastan
printf "${BBlue}Executando Larastan...${NC}\n"
if [ "$IS_SAIL" -eq 1 ]; then
    $PHP_CMD bin phpstan
else
    ./vendor/bin/phpstan
fi

if [ $? -ne 0 ]; then
    show_message "error" "O cÃ³digo nÃ£o estÃ¡ nas diretrizes mÃ­nimas exigidas, execute o LARASTAN e resolva as inconsistÃªncias ðŸ˜‰"
    exit 1
fi

# Rodar os testes do Laravel
printf "${BBlue}Executando testes...${NC}\n"
if [ "$IS_SAIL" -eq 1 ]; then
    $PHP_CMD artisan test --parallel
else
    $PHP_CMD artisan test --parallel
fi

if [ $? -ne 0 ]; then
    show_message "error" "Houve falha nos testes. Arrume antes de continuar... ðŸ˜‰"
    exit 1
fi

# Formatar cada arquivo alterado usando o Laravel Pint
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".php\{0,1\}$") || true

if [ -n "$STAGED_FILES" ]; then
    printf "${BBlue}Executando Laravel Pint nos arquivos modificados...${NC}\n"
    for FILE in $STAGED_FILES; do
        if [ "$IS_SAIL" -eq 1 ]; then
            $PHP_CMD pint "${FILE}" > /dev/null 2>&1
        else
            ./vendor/bin/pint "${FILE}" > /dev/null 2>&1
        fi
        git add "${FILE}"
    done
    show_message "success" "Laravel Pint executado com sucesso nos arquivos modificados."
else
    show_message "success" "Nenhum arquivo PHP modificado para formatar."
fi

exit 0
